#!KAMAILIO
#
# Based on Kamailio SIP Server v5.2 - default configuration script
#     - web: https://www.kamailio.org
#     - git: https://github.com/kamailio/kamailio
#
# Refer to the Core CookBook at https://www.kamailio.org/wiki/
# for an explanation of possible statements, functions and parameters.
#

####### Configuration #########

#!define MULTIDOMAIN 0

# Destination for traffic - the PABX!
####!define SWITCH_ADDRESS "10.0.0.4"
#### pabx.ip = "10.0.0.4" desc "Switch IP Address"
pabx.ip = "lordsomerscampandpowehouse.3cx.com.au" desc "Switch IP Address"

pabx.tcpport = "5060" desc "UDP/TCP Port"
pabx.tlsport = "5061" desc "TLS Port"

# Local calling maximum digits for the initiating PBX - PBX sending the INVITE
server.pbx_max_local_digits = 3 desc "Maximum digits for local pbx extensions"

# shutdown mode
system.shutdownmode = 0 desc "System shutdown mode"

# run once
system.runonce = 0 desc "Run command once"

# MS TEAMS Direct Routing support (optional)
#!define WITH_MSTEAMS

#!ifdef WITH_MSTEAMS
# Subsitution - Listener - Default: should not need changes, but feel free
#!substdef "!SCTP_PORT!5060!g"
#!substdef "!SIP_PORT!5060!g"
#!substdef "!SIPS_PORT!5061!g"

# Subsitution - Configuration
#!substdef "!CERTPATH!/etc/letsencrypt/live/sbc.lordsomerscamp.org.au!g"
#!substdef "!PRIVATE_IP!10.0.0.6!g"
#!substdef "!EXTERNAL_IP!52.189.194.44!g"

# EXTERNAL_NAMESs: Must match the TLS certificate
#!substdef "!EXTERNAL_NAME1!sbc.lordsomerscamp.org.au!g"
#!substdef "!EXTERNAL_NAME2!sbc.lordsomerscamp.com!g"
#!substdef "!EXTERNAL_NAME3!sbc.lordsomerscamp.com.au!g"
#!substdef "!EXTERNAL_NAME4!sbc.webstean.com!g"

# Microsoft Teams Routing Infomation
#!substdef "!MSTEAMS_RR1!sbc.lordsomerscamp.org.au:5061;transport=tls;r2=on!g"
#!substdef "!MSTEAMS_RR2!10.0.0.6:5061;transport=tls;r2=on!g"

# Microsoft Teams Contact - used for authentication - needs to match the certifcate
#!substdef "!MSTEAMS_CONTACT!Contact: <sip:sbc.lordsomerscamp.org.au:5061;transport=tls>\r\n!g"

### $sel(cfg_get.msteams.contact)

/* MS TEAMS */
#!endif

## to be deleted
#######!define FLAG_FROM_PABX 1
#######!define FLAG_FROM_INTERNET 2

# SCTP protocol support (optional)
##!define WITH_SCTP

# HOMER support (optional)
##!define WITH_HOMER

# NAT traversal support (optional)
#!define WITH_NAT

# - flags
#   FLT_ - per transaction (message) flags
#	FLB_ - per branch flags
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5
#!define FLB_NATB 6
#!define FLB_NATSIPPING 7

### LOG Levels:
# L_ALERT     -5
# L_BUG       -4
# L_CRIT2     -3
# L_CRIT      -2
# L_ERR       -1
# L_WARN       0
# L_NOTICE     1
# L_INFO       2
# L_DBG        3

#!define WITH_DEBUG

#!ifdef WITH_DEBUG
####!define DBGLEVEL 3
#!define DBGLEVEL 2
log_stderror=no
#!else
#!define DBGLEVEL 2
log_stderror=no
#!endif

####### Global Parameters #########
debug=DBGLEVEL
memdbg=5
memlog=5
log_color=1

log_facility=LOG_LOCAL0
#### log_prefix="{$mt $hdr(CSeq) $ci} "
log_prefix=""
log_prefix_mode=1
#### setlog(“2”);

/* Locks all Kamailio pages into memory making it unswappable */
#mlock_pages=yes

/* number of SIP routing processes for each socket
 * - value inherited by tcp_children and sctp_children when not set explicitely */
children=4

/* number of SIP routing processes for all TCP/TLS sockets */
tcp_children=4

/* uncomment the next line to disable the auto discovery of local aliases
 * based on reverse DNS on IPs (default on) */
auto_aliases=no

/* When turned on (1), Kamailio will automatically bind to all IPv6 addresses (much like the default behaviour for IPv4). */
auto_bind_ipv6=no

/* life time of TCP connection when there is no traffic
 * - a bit higher than registration expires to cope with UA behind NAT */
tcp_connection_lifetime=3605

/* upper limit for TCP connections (it includes the TLS connections) */
tcp_max_connections=1024

/* Enable TLS Support */
enable_tls=yes
/* upper limit for TLS connections */
tls_max_connections=512

## Obscure
user_agent_header="User-Agent: Kamailio"
server_header="Server: Kamailio"
sip_warning=yes

####### Custom Parameters #########

/* These parameters can be modified runtime via RPC interface
 * - see the documentation of 'cfg_rpc' module.
 *
 * Format: group.id = value 'desc' description
 * Access: $sel(cfg_get.group.id) or @cfg_get.group.id */

####### Modules Section ########
/* set paths to location of modules - adjust as required*/
##mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"

/* tls module needs to enabled before any others */
loadmodule "tls.so"
/* ignore library check */
modparam("tls", "tls_force_run", 11)
modparam("tls", "config", "/etc/kamailio/tls.cfg")

/* set paths to location of modules */
loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "acc.so"
loadmodule "counters.so"
loadmodule "cfgutils.so"
loadmodule "sdpops.so"

#!ifdef WITH_MSTEAMS
loadmodule "dispatcher.so"
#!endif
#!ifdef WITH_NAT
loadmodule "usrloc.so"
loadmodule "nathelper.so"
#!endif

#!ifdef WITH_UAC
loadmodule "uac.so"
modparam("uac", "reg_contact_addr", "webstean.com:5060")
## modparam("uac", "reg_db_url", DBURL)
modparam("uac","auth_username_avp","$avp(auser)")
modparam("uac","auth_password_avp","$avp(apass)")
modparam("uac","auth_realm_avp","$avp(arealm)")
#!endif

#!ifdef WITH_IPAUTH
loadmodule "permissions.so"
### modparam("permissions", "default_allow_file", "/etc/permissions.allow")
#!endif

#!ifdef WITH_DEBUG
## loadmodule "debugger.so"
# ----- debugger params -----
## modparam("debugger", "cfgtrace", 1)
## modparam("debugger", "breakpoint", 1)
## modparam("debugger", "log_level_name", "exec")
#!endif

# ----- sipdump params -----
#!ifdef WITH_DEBUG_SIP
loadmodule "sipdump.so"
modparam("sipdump", "enable", 1)
modparam("sipdump", "wait", 100)
modparam("sipdump", "rotate", 3600)
modparam("sipdump", "folder", "/tmp")
modparam("sipdump", "fprefix", "dsipdump-")
#!endif

#!ifdef WITH_DMQ
loadmodule "dmq.so"
loadmodule "dmq_usrloc.so"
# must be loaded after dmq
loadmodule "htable.so"
loadmodule "dialog.so"
#!endif

# ----------------- setting module-specific parameters ---------------

# ----- xlog params -----
modparam("xlog", "force_color", 1)

#!ifdef WITH_MSTEAMS
# ----- dispatcher params -----
modparam("dispatcher", "list_file", "/etc/kamailio/msteams.list")
modparam("dispatcher", "ds_probing_mode", 1)
modparam("dispatcher", "ds_ping_interval", 60)
### use 'kamcmd dispatcher.list | egrep "URI|FLAGS"' to check status
### The first letter in the flag means is the current state, Active (A), Inactive (I) or Disabled (D).
### The second letter in the flag means monitor status, Probing (P) meaning actively checked with SIP Options pings, or Not Set (X) denoting the device isn’t actively checked with SIP Options pings.
### AP – Actively Probing – SIP OPTIONS are getting a response, routing to this destination is possible, and it’s “Up” for all intents and purposes.
### IP – Inactively Probing – Destination is not meeting the threshold of SIP OPTIONS request responses it needs to be considered active. The destination is either down or not responding to all SIP OPTIONS pings. Often this is due to needing X number of positive responses before considering the destination as “Up”.
### DX – Disabled & Not Probing – This device is disabled, no SIP OPTIONS are sent.
### AX – Active & Not Probing– No SIP OPTIONS are sent to check state, but is is effectively “Up” even though the remote end may not be reachable.
#!endif

#!ifdef WITH_HOMER
loadmodule "siptrace.so"
# check IP and port of your capture node
modparam("siptrace", "duplicate_uri", "sip:10.0.0.1:9060")
# Send from an IP
modparam("siptrace", "send_sock_addr", "sip:10.2.0.2:5000")
modparam("siptrace", "hep_mode_on", 1)
modparam("siptrace", "trace_to_database", 0)
modparam("siptrace", "trace_flag", 22)
modparam("siptrace", "trace_on", 1)
#!endif

#!ifdef WITH_NAT
# ----- userloc params -----
modparam("usrloc", "timer_interval", 60)
modparam("usrloc", "timer_procs", 1)
modparam("usrloc", "use_domain", MULTIDOMAIN)

# ----- nathelper params -----
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:pinger@EXTERNAL_NAME1")

# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)
#!endif

# ----- jsonrpcs params -----
modparam("jsonrpcs", "pretty_format", 1)
/* set the path to RPC fifo control file */
modparam("jsonrpcs", "fifo_name", "/run/kamailio/kamailio_rpc.fifo")
/* set the path to RPC unix socket control file */
modparam("jsonrpcs", "dgram_socket", "/run/kamailio/kamailio_rpc.sock")

# ----- ctl params -----
/* set the path to RPC unix socket control file */
modparam("ctl", "binrpc", "unix:/run/kamailio/kamailio_ctl")

# ----- tm params -----
# auto-discard branches from previous serial forking leg
modparam("tm", "failure_reply_mode", 3)
# default retransmission timeout: 30sec
modparam("tm", "fr_timer", 30000)
# default invite retransmission timeout after 1xx: 120sec
modparam("tm", "fr_inv_timer", 120000)

# ----- rr params -----
# set next param to 1 to add value to ;lr param (helps with some UAs)
modparam("rr", "enable_full_lr", 0)
# do not append from tag to the RR (no need for this script)
# modparam("rr", "append_fromtag", 0)
modparam("rr", "append_fromtag", 1)

# ----- acc params -----
# what special events should be accounted?
modparam("acc", "early_media", 0)
modparam("acc", "report_ack", 0)
modparam("acc", "report_cancels", 0)
# by default ww do not adjust the direction of the sequential requests
# if you enable this parameter, be sure the enable "append_fromtag" in "rr" module
modparam("acc", "detect_direction", 0)
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_facility", "LOG_LOCAL0")
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "log_extra",
	"src_user=$fU;src_domain=$fd;src_ip=$si;dst_ouser=$tU;dst_user=$rU;dst_domain=$rd;"
	"calltype=$avp(calltype);src_gwgroupid=$avp(src_gwgroupid);dst_gwgroupid=$avp(dst_gwgroupid)")
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)
loadmodule "db_flatstore.so"
modparam("acc", "db_url", "flatstore:/var/log/kamailio-accounting.log")

####### Listeners ########
# disable Stream Control Tranmission Protocol (SCTP)
enable_sctp = 0  /* SCTP disabled (0)/ SCTP enabled (1) /auto (2), default auto (2) */

tcp_accept_no_cl = true
tcp_rd_buf_size = 16384

### Set up listeners - if none set, Kamailio binds to all local IP addresses
### format listen variable: listen=[proto]:[localip]:[lport] advertise [publicip]:[pport]
listen=tls:PRIVATE_IP:SIPS_PORT advertise EXTERNAL_IP:SIPS_PORT
### - basic prototype (full prototype can be found in Wiki - Core Cookbook):
###   listen=[proto]:[localip]:[lport] advertise [publicip]:[pport]
listen=tcp:PRIVATE_IP:SIP_PORT advertise EXTERNAL_IP:SIP_PORT

# try not to allow UDP connections -its insecure
listen=udp:PRIVATE_IP:SIP_PORT advertise EXTERNAL_IP:SIP_PORT

/* add local domain aliases - it can be set many times */
#!ifdef EXTERNAL_NAME4
alias=tcp:EXTERNAL_NAME4:SIP_PORT
alias=tls:EXTERNAL_NAME4:SIPS_PORT
alias=udp:EXTERNAL_NAME4:SIP_PORT
#!endif

#!ifdef EXTERNAL_NAME3
alias=tcp:EXTERNAL_NAME3:SIP_PORT
alias=tls:EXTERNAL_NAME3:SIPS_PORT
alias=udp:EXTERNAL_NAME3:SIP_PORT
#!endif

#!ifdef EXTERNAL_NAME2
alias=tcp:EXTERNAL_NAME2:SIP_PORT
alias=tls:EXTERNAL_NAME2:SIPS_PORT
alias=udp:EXTERNAL_NAME2:SIP_PORT
#!endif

#!ifdef EXTERNAL_NAME1
alias=tcp:EXTERNAL_NAME1:SIP_PORT
alias=tls:EXTERNAL_NAME1:SIPS_PORT
alias=udp:EXTERNAL_NAME1:SIP_PORT
#!endif

#### sip:anonymous@anonymous.invalid 

####### Routing Logic ########
/* Main SIP request routing logic
 * - processing of any incoming SIP request starts with this route
 * - note: this is the same as route { ... } */
request_route {

	# check if everything is ok to run
	route(OK);
	
	# handle DMQ messages
	route(DMQ);

	# Check for shutdown mode:
	# Run 'kamcmd cfg.set system.shutdownmode 1' to enabled
    if ($sel(cfg_get.system.shutdownmode) > 0) {
        send_reply("503", "Server shutting down");
        exit;
	}

	# Run once for log files
    #if ($sel(cfg_get.system.runonce) > 2) {
    #    route(STARTUP);
	#	## cfg_set.system.runonce = 2
	#}

	# info if new call
	if (is_method("INVITE") && !has_totag()) {
		xlog("L_INFO", "*new call* $si:$sp:$rP ($fu => $ru)\n");
		if(sdp_content()) {
			xlog("L_INFO", "*new call* $si:$sp:$rP -- removing codecs\n");
			# remove SILK
			sdp_remove_codecs_by_name("SILK");
			sdp_remove_codecs_by_name("opus");
			sdp_remove_codecs_by_name("SIREN");
		}
	}
	
	# per request initial checks
	route(REQINIT);

/*
 	if (allow_source_address(FLT_MSTEAMS)) {
		setbflag(FLB_SRC_MSTEAMS);
		setflag(FLT_USE_RTPE);
   	}
*/

	# Perform NAT detection
	route(NATDETECT);

#!ifdef WITH_HOMER
	setflag(22);
    #start duplication mode: m or M for message; t or T for transaction; d or D for dialog
    sip_trace_mode("t");
#!endif

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			route(RELAY);
		}
		exit;
	}

	# handle retransmissions
	if (!is_method("ACK")) {
		if(t_precheck_trans()) {
			t_check_trans();
			exit;
		}
		t_check_trans();
	}

	# handle requests within SIP dialogs
	route(WITHINDLG);
	
	### only initial requests (no To tag)

	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");

#!ifdef WITH_MSTEAMS
    if (is_method("INVITE|REFER") && $ru =~ "pstnhub.microsoft.com") {
        record_route_preset("MSTEAMS_RR1","MSTEAMS_RR2");
	} else {
#!endif
		if (is_method("INVITE")) {
			record_route();
		}
#!ifdef WITH_MSTEAMS
	}
#!endif
	
	# why?
	if (is_method("SUBSCRIBE")) {
		record_route();
	}

	# Ignore REGISTER - dont send them to proxy -remove later
	if (is_method("REGISTER")) {
		sl_send_reply("404","Not Handled Here");
        exit ;
	}

	if ($rU==$null) {
		# request with no Username in RURI
		xlog("L_INFO","Result=Address is InComplete=>: $rm from {$fu ($si:$sp)}\n");
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	# $rU - Username in R-URI, $tU - To URI Username (Phone Number)
	if(is_method("INVITE") && ($tU == "000" or $tU == "112" or $tU == "116")){      
  		#Matches any INVITEs with the Request URI to Address as 000, 112 or 116
  		xlog("L_ALERT","Emergency call from $fU to $rU (Emergency number) CSeq is $cs ");
	}

	if(is_method("INVITE")) {      
  		xlog("L_ALERT","$rU - Username in R-URI $$rU");
  		xlog("L_ALERT","$tU - Username in T-URI $$tU");
  		xlog("L_ALERT","$ru - Received  URI $$ru");
		xlog("L_ALERT","$tu - DEstination URI $$tu");
		xlog("L_ALERT","$si - Source IP Address $$si");
		xlog("L_ALERT","$du - Destination URI $$du");
		xlog("L_ALERT","$fu - From URI $$fu");
		xlog("L_ALERT","$fU - Username From URI $$fU");
		xlog("L_ALERT","$ft - From tag $$ft");
		xlog("L_ALERT","$fd - From URI domain");
		xlog("L_ALERT","$dd - Destination URI domain");
	}

	# proxy away
	route(PROXY);

	exit;
}

# Check if config is ok - otherwise crash
route[OK] {
#!ifndef WITH_MSTEAMS
	pkg_status();
	pkg_summary();
	xlog("L_BUG", "Invalid configuration - Microsoft Teams parameters need to be defined");
	abort();
#!else
	return ;
#!endif
}

# Update $du to set the destination address (proxy)
route[PROXY] {
	$du = "sip:" + $sel(cfg_get.pabx.ip) + ":"
		+ $sel(cfg_get.pabx.tlsport) + ";transport=TLS";
	
	xlog("L_ERROR","Proxy: [$rm] $fu ($si:$sp) [$rP] ==> $du");

	route(RELAY);
}

route[MESSAGE] {
#!ifdef WITH_UAC
	$uac_req(method)="MESSAGE";
	$uac_req(ruri)="sip:10.0.0.6:5060";
	$uac_req(furi)="sip:Emergency Alert";
  	$uac_req(turi)="sip:thisphone";
  	$uac_req(callid)=$(mb{s.md5});
  	$uac_req(hdrs)="Subject: Emergency Alert\r\n";
  	$uac_req(hdrs)=$uac_req(hdrs) + "Content-Type: text/plain\r\n";
  	$uac_req(body)="Emergency call from " + $fU + " on IP Address " + $si + " to " + $rU + " (Emergency Number)";
  	$uac_req(evroute)=1;
  	uac_req_send();
#!endif
	return;
}

route[DMQ] {
#!ifdef WITH_DMQ
	if ($rm == "KDMQ" && $rp == DMQ_PORT) {
		dmq_handle_message();
		exit;
	}
#!else
	return;
#!endif
}

# Wrapper for relaying requests
route[RELAY] {

	# enable additional event routes for forwarded requests
	# - serial forking, RTP relaying handling, a.s.o.
	if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
	}
	if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
	}
	if (is_method("INVITE")) {
		if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}

	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}

# Per SIP request initial checks
route[REQINIT] {

	# no connect for sending replies
	set_reply_no_connect();
	# enforce symmetric signaling
	# - send back replies to the source address of request
	force_rport();

	# Check for dodgie SIP agents
	if($ua =~ "friendly-scanner|sipcli|VaxSIPUserAgent") {
		# silent drop for scanners - uncomment next line if want to reply
		# sl_send_reply("200", "OK");
		exit;
	}

	# Check for loops
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	# Respond to KeepAlives
    if(is_method("OPTIONS") && uri==myself && $rU==$null) {
		sl_send_reply("200","Keepalive");
		exit;
	}

	# check the sanity of the message
	if(!sanity_check("1511", "7")) {
		xlog("L_ALERT","Malformed SIP message from $si:$sp\n");
		exit;
	}
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (!has_totag()) return;

	# sequential request withing a dialog should
	# take the path determined by record-routing
	if (loose_route()) {
		if (is_method("BYE")) {
			setflag(FLT_ACC); # do accounting ...
			setflag(FLT_ACCFAILED); # ... even if the transaction fails
		} else if ( is_method("NOTIFY") ) {
			# Add Record-Route for in-dialog NOTIFY as per RFC 6665.
			record_route();
		}
		route(RELAY);
		exit;
	}

	if ( is_method("ACK") ) {
		if ( t_check_trans() ) {
			# no loose-route, but stateful ACK;
			# must be an ACK after a 487
			# or e.g. 404 from upstream server
			route(RELAY);
			exit;
		} else {
			# ACK without matching transaction ... ignore and discard
			exit;
		}
	}
	sl_send_reply("404","Not here");
	exit;
}

# Caller NAT detection
route[NATDETECT] {
#!ifdef WITH_NAT
	if (nat_uac_test("19")) {
		if (is_method("REGISTER")) {
			fix_nated_register();
		} else {
			if(is_first_hop()) {
				set_contact_alias();
			}
		}
		setflag(FLT_NATS);
	}
#!endif
	return;
}

# signaling updates for NAT traversal
route[NATMANAGE] {
#!ifdef WITH_NAT
	if (is_request()) {
		if(has_totag()) {
			if(check_route_param("nat=yes")) {
				setbflag(FLB_NATB);
			}
		}
	}
	if (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB))) return;

	if (is_request()) {
		if (!has_totag()) {
			if(t_is_branch_route()) {
				add_rr_param(";nat=yes");
			}
		}
	}
	if (is_reply()) {
		if(isbflagset(FLB_NATB)) {
			if(is_first_hop())
				set_contact_alias();
		}
	}

	if(isbflagset(FLB_NATB)) {
		# no connect message in a dialog involving NAT traversal
		if (is_request()) {
			if(has_totag()) {
				set_forward_no_connect();
			}
		}
	}
#!endif
	return;
}

# Manage outgoing branches
branch_route[MANAGE_BRANCH] {
	xlog("L_ERROR","new branch (outgoing): [$T_branch_idx] to $ru\n");
	route(NATMANAGE);
}

# Manage incoming replies
onreply_route[MANAGE_REPLY] {
	xlog("L_ERROR","incoming reply: [$rm] with $rr $fu $ru to [$du] $tu\n");
	if(status=~"[12][0-9][0-9]") {
		route(NATMANAGE);
	}
}

# Manage failure routing cases
failure_route[MANAGE_FAILURE] {
	xlog("L_ALERT","ALERT: route failure $rm $fu (IP:$si:$sp) ==> $du $xavp(_dsdst_=>attrs)\n");
	route(NATMANAGE);
	if (t_is_canceled()) exit;
#!ifdef WITH_UAC
##	if(t_check_status("401|407")) {
##		xlog("L_INFO","Need to try to authenticate....");
##        $avp(auser) = "10001";
##        $avp(apass) = "5x2XYhOrZc";
##		$avp(arealm) = "3CXPhoneSystem";
##        uac_auth();
##		t_relay();
##        exit;
##    }
#!endif
}

#!ifdef WITH_MSTEAMS
event_route[tm:local-request] {
    if(is_method("OPTIONS") && $ru =~ "pstnhub.microsoft.com") {
        append_hf("MSTEAMS_CONTACT");
    }
    # xlog("L_INFO", "MS Teams OPTIONS $ru with MSTEAMS_CONTACT");
	}
#!endif

