route[RTPENGINEOFFER] {

#!ifdef WITH_MORELOGGING
	xlog("L_NOTICE", "RTPENGINEOFFER: ($rm) $fu to $ru (IP:$si:$sp)($ci)\n");
#!endif
	# - WebSocket to WebSocket
	if (isflagset(FLT_SRC_WS) && isbflagset(FLB_WS_DEVICE)) {
		$var(reflags) = "trust-address replace-origin replace-session-connection SDES-off ICE=force";
	}
	# - WebSocket to SIP
	else if (isflagset(FLT_SRC_WS)) {
		$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-demux ICE=remove RTP/AVP";
	}
	# - SIP to WebSocket
	else if (isbflagset(FLB_WS_DEVICE)) {
		$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-offer ICE=force transcode-PCMU transcode-G722 SDES-off UDP/TLS/RTP/SAVP";
	}
	# - MSTEAMS to SIP using RTP/AVP (unecrypted)
	else if (isbflagset(FLB_SRC_MSTEAMS)) {
		$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-offer ICE=remove RTP/AVP";
	}
	# - MSTEAMS to SIP ONHOLD using RTP/AVP (unencrypted)
	else if (isbflagset(FLB_SRC_MSTEAMS_ONHOLD)) {
		$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-accept ICE=remove RTP/AVP";
	}
	# - SIP (unecrypted) to MSTEAMS (encrypted)
	else if (isbflagset(FLB_DST_MSTEAMS)) {
		$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-offer ICE=force transcode-PCMU transcode-G722 RTP/SAVP";
	}
	# - SIP (unecrypted) to SIP (unecrypted)
	else {
		$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-demux ICE=remove RTP/AVP";
	}

	#### Server NAT
	if (($rd=~$avp(local_subnet)) {
		$var(reflags)= $var(reflags) + " media-address=INTERNAL_IP_ADDR";
	}

	xlog("L_INFO", "RTPENGINEOFFER <$ci> reflags: $var(reflags)");
	rtpengine_offer("$var(reflags)");

	return;
}

route[RTPENGINEANSWER] {

#!ifdef WITH_MORELOGGING
	xlog("L_NOTICE", "RTPENGINEANSWER: ($rm) $fu to $ru (IP:$si:$sp)($ci)\n");
#!endif
	# - WebSocket to WebSocket
	if (isflagset(FLT_SRC_WS) && isbflagset(FLB_WS_DEVICE)) {
		$var(reflags) = "trust-address replace-origin replace-session-connection SDES-off ICE=force";
	}
	# - WebSocket to SIP (encrypted)
	else if (isflagset(FLT_SRC_WS)) {
		$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-require ICE=force RTP/SAVPF";
	}
	# - MSTEAMS (encrypted) to SIP using RTP/AVP (unencrypted)
	else if (isbflagset(FLB_DST_MSTEAMS)) {
		$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-offer ICE=remove RTP/AVP";
	}
	# - SIP (unecrypted) to MSTEAMS (encrypted, transcoded to G722)
	else if (isbflagset(FLB_SRC_MSTEAMS)) {
		$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-require ICE=force transcode-PCMU transcode-G722 SDES-off RTP/SAVP";
		#$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-offer ICE=force SDES-off RTP/SAVP";
	}
	# - SIP (unecrypted) to MSTEAMS ONHOLD (encrypted, transcode to G722)
	else if (isbflagset(FLB_SRC_MSTEAMS_ONHOLD)) {
		xlog("ONHOLD - ANSWER");
		$var(reflags) = "trust-address replace-origin replace-session-connection ICE=remove  transcode-PCMU transcode-G722 SDES-off RTP/SAVP";
		#$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-offer ICE=force SDES-off RTP/SAVP";
	}
	# - SIP (unecrypted) to SIP (unencrypted)
	else {
		$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-demux ICE=remove RTP/AVP";
	}

	xlog("L_INFO", "RTPENGINEANSWER $rd = $avp(local_subnet)");
	if (($rd=~$avp(local_subnet)) && !isbflagset(FLB_SRC_MSTEAMS)) {
		$var(reflags)= $var(reflags) + " media-address=INTERNAL_IP_ADDR";
	}

	xlog("L_INFO", "RTPENGINEANSWER <$ci> reflags: $var(reflags)");
	rtpengine_answer("$var(reflags)");

	return;
}

# Server NAT detection
route[SERVERNATDETECT] {
	# Detect if Kamailio is configured behind NAT
	if ("INTERNAL_IP_ADDR" != "EXTERNAL_IP_ADDR") {
		setflag(FLT_SERVERNAT);
		# Legacy flag - marked for removal
		setflag(FLT_NATS);
	}
	else {
		return;
	}

	# If so, calculate the Local Subnet
	#Build a regular expression for figuring out if the request is going towards a local machine
	$var(local_subnet) = "INTERNAL_IP_NET";
	# Replace the dots with \.
	$var(local_subnet) = $(var(local_subnet){s.replace,.,\.});
	# Replace the 0 with .*
	$avp(local_subnet) = $(var(local_subnet){s.replace,*,.*});

	# Detect if the current $rd or $dd is local
	if ($rd=~$avp(local_subnet)) {

		setflag(FLT_DST_INTERNAL_IP);

	}
	return;
}

route[REMOVE_REFER] {
    if ( subst_hf("Allow", "/(.+)(REFER,)\s(.+)/\1\3/", "f")) {
        xlog("L_INFO", "REMOVE_REFER <$ci> Removed REFER from Accepted Method to $du");
        msg_apply_changes();
    }
}
