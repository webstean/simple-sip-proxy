/* inside route {} */

route[FLAGS_INFO] {

	if (!has_body("application/sdp")) return ;
	
	## Transaction Flags
	xlog("L_ERROR", "****=== FLAG INFO ===***");
	xlog("L_ERROR", "**Method (rm)  : $rm [$hdr(User-Agent)]");
	xlog("L_ERROR", "**Source (su)  : $su");
		
	if (isflagset(FLT_SRC_SIP)) {
		xlog("L_ERROR", "****Source Proto: $rP ($rp)");
	}
	xlog("L_ERROR", "**Dest (tu)    : $tu");
	
	## Teams Branch Flags
	if (isbflagset(FLB_SRC_MSTEAMS)) {
		xlog("L_INFO", "****Source (Branch) : Microsoft Teams");
	}
	if (isbflagset(FLB_SRC_MSTEAMS_ONHOLD)) {
		xlog("L_INFO", "****Source (Branch) : Microsoft Teams (ON-HOLD)");
	}
	if (isbflagset(FLB_DST_MSTEAMS)) {
		xlog("L_INFO", "****Routing Destination (Branch): Microsoft Teams");
	}
	if (isbflagset(FLT_PBX_AUTH)) {
		xlog("L_INFO", "****Routing Destination (Branch): PABX");
	}
	
	xlog("L_ERROR", "Finished FLAGSINFO");
	return ;
}

# set applicable flags
route[FLAGS] {

	# Source is MSTEAMS - Microsoft Teams is calling
	if ($hdr(User-Agent) =~ "Microsoft.PSTNHub") {
		setbflag(FLB_SRC_MSTEAMS);
	}
		
	# Source is MSTEAMS and call is onhold - Microsoft Teams is calling but call is on-hold
	if (is_method("INVITE") && $hdr(User-Agent) =~ "Microsoft.PSTNHub" && $avp(sdp_media_direction) == "inactive") {
		setbflag(FLB_SRC_MSTEAMS_ONHOLD);
    }
	
	# Destination is Microsoft Teams - Onbound call to Microsoft Teams
	if ($rd =~ "pstnhub.microsoft.com") {
		setbflag(FLB_DST_MSTEAMS);
##		# Create proper SIP Contact Record for MSTEAMS - otherwise you'll get forbidden
##		if ($(ct{tobody.user})!=$null) {
##			$var(ctuser) = $(ct{tobody.user});
##			$var(cthost) = $si;
##			$var(ctport) = $sp;
##			remove_hf("Contact");
##			insert_hf("Contact: <sip:$var(ctuser)@$var(cthost):$var(ctport)");
##			xlog("L_INFO","Changed contact for MSTEAMS: <sip:$var(ctuser)@$var(cthost):$var(ctport)");
##		}
	}

	# setflag(RECORD_CALL);
	return ;
}

	# transcode everything to Opus
#	$var(rtpengine_codec) = "mask-all transcode-opus";
	
	# transcode everything to G729
#	$var(rtpengine_codec) = "codec-strip=all codec-offer=G729 codec-offer=telephone-event";

#	$var(rtpengine_flags) = "ICE=force-relay DTLS=passive";

	# nat_uac_test("8"): The SDP is searched for occurrence of RFC1918 (Private Address Space) or RFC6598 (Carrier Grade NAT) addresses
	#if(nat_uac_test("8")) {
	#	rtpengine_manage("$var(rtpengine_conn)" + "replace-origin replace-session-connection ICE=remove "    + "$var(rtpengine_codec)");
	#} else {
	#	rtpengine_manage("$var(rtpengine_conn)" + "trust-address replace-origin replace-session-connection " + "$var(rtpengine_codec)");
	#}
		
	# replace-origin - flags that IP from the origin description (o=) should be also changed.
	# trust-address - flags that IP address in SDP should be trusted. ignores address in the SDP and uses source address of the SIP message as media address which is passed to the RTP proxy.
	# replace-session-connection - flags to change the session-level SDP connection (c=) IP if media description also includes connection information.
	# ICE=... - controls the RTP proxy's behaviou
	#     “force” - discard any ICE attributes already present in the SDP body and then generate and insert new ICE data, leaving itself as the only ICE candidates; “force-relay” - discard any “relay” type ICE attributes already present in the SDP body and then generate and insert itself as the only ICE “relay” candidates;
	#     “remove” instructs the RTP proxy to discard any ICE attributes and not insert any new ones into the SDP.
	#     The default (if no “ICE=...” is given at all), new ICE data will only be generated if no ICE was present in the SDP originally; otherwise the RTP proxy will only insert itself as additional ICE candidate. Other SDP substitutions (c=, m=, etc) are unaffected by this flag.
	#
	#

	# unencrypted via UDP (UDP/RTP/AVP) -  Everything else
	# unencrypted via TCP (TCP/RTP/AVP) - 3CX at Somers and Albert Park
	# MSTEAMS encrypted via SLS (RTP/SAVP)
	# WEBRTC Bridge RTP/AVP <-> RTP/SAVPF

	# strip all codecx and rewrite with G729
	# example: codec-strip=all codec-offer=G729 codec-offer=telephone-event
	# G.729 when bandwidth must be conserved. 
		
	# any sdp changes - 

	# to instruct rtpengine to translate the SDP to plain RTP when sending to Asterisk.
	# The appropriate flag to use in this case would be `RTP/AVP`

	# RTP/AVP - Real-time Transport Protocol / Audio Video Profile TCP/RTP/AVP
	# RTP/AVPF - Extended RTP Profile for RTCP-based Feedback (Audio-Visual Profile with Feedback)
	# RTP/SAVP - Real-time Transport Protocol / Secure Audio Video Profile (over DTLS) DCCP/TLS/RTP/SAVP
	# RTP/SAVPF - Extended Secure RTP Profile for RTCP-based Feedback (over DTLS) DCCP/TLS/RTP/SAVPF

route[RTPMANAGE] {
#!ifdef USE_RTPENGINE
	if (!has_body("application/sdp")) return ;

	# - MSTEAMS to SIP using RTP/AVP
	if (isbflagset(FLB_SRC_MSTEAMS)) {
		$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-offer ICE=remove RTP/AVP";
	}
	# - MSTEAMS to SIP ONHOLD using RTP/AVP
	else if (isbflagset(FLB_SRC_MSTEAMS_ONHOLD)) {
		$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-accept ICE=remove RTP/AVP";
	}
	# - SIP to MSTEAMS
	else if (isbflagset(FLB_DST_MSTEAMS)) {
		$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-offer ICE=force transcode-PCMU transcode-G722 RTP/SAVP";
	}
	# - SIP to SIP
	else {
		$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-demux ICE=remove RTP/AVP";
	}

#!ifdef XXXXXXX
	if (($rd=~$var(local_subnet)) || (allow_source_address(FLT_CARRIER))) {
		$var(reflags)= $var(reflags) + " media-address=INTERNAL_IP_ADDR";
	}
#!endif

    xlog("L_INFO", "RTP [$rm] - MANAGE : $var(reflags)");
	rtpengine_manage("$var(reflags)");
#!endif
	return ;
}




route[RTPOFFER] {
#!ifdef USE_RTPENGINE
	if (!has_body("application/sdp")) return ;

	# - MSTEAMS to SIP using RTP/AVP
	if (isbflagset(FLB_SRC_MSTEAMS)) {
		$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-offer ICE=remove RTP/AVP";
	}
	# - MSTEAMS to SIP ONHOLD using RTP/AVP
	else if (isbflagset(FLB_SRC_MSTEAMS_ONHOLD)) {
		$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-accept ICE=remove RTP/AVP";
	}
	# - SIP to MSTEAMS
	else if (isbflagset(FLB_DST_MSTEAMS)) {
		$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-offer ICE=force transcode-PCMU transcode-G722 RTP/SAVP";
	}
	# - SIP to SIP
	else {
		$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-demux ICE=remove RTP/AVP";
	}

#!ifdef XXXXXXX
	if (($rd=~$var(local_subnet)) || (allow_source_address(FLT_CARRIER))) {
		$var(reflags)= $var(reflags) + " media-address=INTERNAL_IP_ADDR";
	}
#!endif

    xlog("L_INFO", "RTP [$rm] - OFFER  : $var(reflags)");
	rtpengine_offer("$var(reflags)");
#!endif
	return ;
}

/* inside reply_route {} */
route [RTPANSWER] {
#!ifdef USE_RTPENGINE
	if (!has_body("application/sdp")) return ;

	# - PABX to MSTEAMS 
	if (isbflagset(FLB_DST_MSTEAMS)) {
		$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-offer ICE=remove RTP/AVP";
	}
	# - MSTEAMS to PABX
	else if (isbflagset(FLB_SRC_MSTEAMS)) {
		$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-require ICE=force transcode-PCMU transcode-G722 SDES-off RTP/SAVP";
		#$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-offer ICE=force SDES-off RTP/SAVP";
	}
	# - MSTEAM (On-Hold) to PABX
	else if (isbflagset(FLB_SRC_MSTEAMS_ONHOLD)) {
		xlog("ONHOLD - ANSWER");
		$var(reflags) = "trust-address replace-origin replace-session-connection ICE=remove  transcode-PCMU transcode-G722 SDES-off RTP/SAVP";
		#$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-offer ICE=force SDES-off RTP/SAVP";
	}
	# - PABX to PABX
	else {
		$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-demux ICE=remove RTP/AVP";
	}

    rtpengine_answer("$var(reflags)");
#!endif
	return ;
}

